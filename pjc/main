<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <title>하루감정</title>
  <style>
    body {
      font-family: 'Noto Sans KR', sans-serif;
      background-color: #fdf6ee;
      color: #333;
      text-align: center;
      margin: 0;
      padding: 0;
    }
    h1 {
      margin-top: 30px;
      color: #f19584;
    }
    .calendar {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      max-width: 600px;
      margin: 20px auto;
      gap: 5px;
    }
    .day {
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 20px;
      min-height: 60px;
      cursor: pointer;
      position: relative;
      transition: background 0.2s;
    }
    .day:hover {
      background-color: hwb(29 58% 0%);
    }
    .emoji {
      font-size: 18px;
      position: absolute;
      bottom: 5px;
      right: 10px;
    }
    #chart-container {
      width: 80%;
      margin: 40px auto;
    }
    .weekdays {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  max-width: 600px;
  margin: 0 auto;
  font-weight: bold;
  margin-bottom: 5px;
}

.weekday {
  padding: 10px 0;
  background-color: #ffede4;
  border-radius: 6px;
}

.sun {
  color: rgb(255, 103, 93);
}

.sat {
  color: rgb(103, 103, 255);
}

  </style>
</head>
<body>

  <h1>📆 하루감정 🤗</h1>
  <div style="display: flex; justify-content: center; align-items: center; gap: 1rem; margin-top: 1rem;">
  <button id="prev">◀ 이전달</button>
  <h2 id="monthText">2025년 6월</h2>
  <button id="next">다음달 ▶</button>
</div>
    <div class="calendar weekdays">
  <div class="weekday sun">일</div>
  <div class="weekday">월</div>
  <div class="weekday">화</div>
  <div class="weekday">수</div>
  <div class="weekday">목</div>
  <div class="weekday">금</div>
  <div class="weekday sat">토</div>
</div>

  <div id="calendar" class="calendar"></div>

  <div id="chart-container">
    <canvas id="emotionChart"></canvas>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    const calendar = document.getElementById('calendar');
    let currentYear = new Date().getFullYear();
    let currentMonth = new Date().getMonth(); // 0부터 시작
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth(); // 0 ~ 11
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    const emotionMap = {
      '행복': '😊', '기쁨': '😄', '슬픔': '😢',
      '화남': '😠', '짜증': '😤', '우울': '😞', '설렘': '😍'
    };

    let diaryData = JSON.parse(localStorage.getItem('diary')) || {};

    function renderCalendar(year, month) {
  const firstDay = new Date(year, month, 1).getDay(); // 시작 요일
  const daysInMonth = new Date(year, month + 1, 0).getDate(); // 말일

  calendar.innerHTML = ''; // 달력 초기화

  // 🔸 빈 칸 생성 (달력 시작 위치 맞추기)
  for (let i = 0; i < firstDay; i++) {
    const blank = document.createElement('div');
    blank.className = 'day';
    blank.style.visibility = 'hidden';
    calendar.appendChild(blank);
  }

  for (let day = 1; day <= daysInMonth; day++) {
    // 🔹 기존 날짜 셀 렌더링 코드 재사용
    const cell = document.createElement('div');
    cell.className = 'day';
    cell.textContent = day;

    const dateKey = `${year}-${month + 1}-${day}`;
    const entry = diaryData[dateKey];
    if (entry && entry.emotion) {
      const emoji = document.createElement('span');
      emoji.className = 'emoji';
      emoji.textContent = emotionMap[entry.emotion] || '✍️';
      cell.appendChild(emoji);
    }

    cell.onclick = () => openDiaryPrompt(dateKey);
    calendar.appendChild(cell);
  }

  document.getElementById('monthText').textContent = `${year}년 ${month + 1}월`;
}


    function analyzeEmotion(text) {
      for (const key in emotionMap) {
        if (text.includes(key)) return key;
      }
      return '기타';
    }

    function openDiaryPrompt(dateKey) {
      const prev = diaryData[dateKey]?.text || '';
      const userText = prompt("오늘의 감정을 기록해보세요 ✍️", prev);
      if (userText === null) return;
      const emotion = analyzeEmotion(userText);
      diaryData[dateKey] = { text: userText, emotion };
      localStorage.setItem('diary', JSON.stringify(diaryData));
      renderCalendar(currentYear, currentMonth);
      renderChart();
    }

    function renderChart() {
      const count = {};
      for (const key in diaryData) {
        const emotion = diaryData[key].emotion;
        count[emotion] = (count[emotion] || 0) + 1;
      }

      const ctx = document.getElementById('emotionChart').getContext('2d');
      if (window.emotionChart) window.emotionChart.destroy();

      window.emotionChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: Object.keys(count),
          datasets: [{
            label: '감정 빈도',
            data: Object.values(count),
            backgroundColor: 'rgba(255, 170, 150, 0.6)'
          }]
        }
      });
    }
    document.getElementById('prev').onclick = () => {
  currentMonth--;
  if (currentMonth < 0) {
    currentMonth = 11;
    currentYear--;
  }
  renderCalendar(currentYear, currentMonth);
};

document.getElementById('next').onclick = () => {
  currentMonth++;
  if (currentMonth > 11) {
    currentMonth = 0;
    currentYear++;
  }
  renderCalendar(currentYear, currentMonth);
};
    renderCalendar(currentYear, currentMonth);
    renderChart();
  </script>
</body>
</html>
x